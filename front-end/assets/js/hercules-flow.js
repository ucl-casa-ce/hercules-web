var deckgl = null;
var experiment = null;
var changeExperiment = null;
var backgroundImage = null;

var layers = [];
var mapGLLayers = [];
var mainDeck;

//A flag to pause/play the animation.
var isAnimating = false;

//A flag to kick off the first animation when the page is loaded (just used once).
var firstLoad = true;

//this a manual ticks coming from the slider when the user selects a time manually
var manualTime = -1; 

//this flag is set to 1 to indicate that the slider is clicked while being dragged. It is set to 0 when the
//click is released (the user no longer is dragging the slider)
var manualPressed = 0; 

//A function resposible of animating each frame (called on each tick to animate the frame)
var animate; 

//This variable is used to compate current minute and past minute, this useful for updating the slider
var previousMinutes = -1;

var isHoveringOnSlider = false;

var url = new URL(window.location.origin);
url.port = '32769';
const baseURL = url.toString();

const patients1 = ["G0132",
"G0167",
"G0501",
"G0502",
"G0503",
"G0504",
"G0505",
"G0506",
"G0507",
"G0508",
"G0509",
"G0513",
"G0514",
"G0515",
"G0516",
"G0517",
"G0518",
"G0519",
"G0520",
"G0521",
"G0523",
"G0524",
"G0525",
"G0526",
"G0527",
"G0530",
"G0531",
"G0533",
"G0534",
"G0535",
"G0536",
"G0538",
"G0539",
"G0540",
"G0541",
"G0545",
"G0546",
"G0547",
"G0548",
"G0549",
"G0550",
"G0551",
"G0552",
"G0553",
"G0554",
"G0555",
"G0556",
"G0557",
"G0558",
"G0559",
"G0560",
"G0561",
"G0562",
"G0563",
"G0565",
"G0566",
"G0567",
"G0570",
"G0571",
"G0572",
"G0573",
"G0574",
"G0575",
"G0576",
"G0577",
"G0578",
"G0579",
"G0580",
"G0581",
"G0582",
"G0583",
"G0584",
"G0585",
"G0586",
"G0587",
"G0588",
"G0589",
"G0590",
"G0591",
"G0593",
"G0594",
"G0595",
"G0596",
"G0597",
"G0598",
"G0599",
"G0600",
"G0601",
"G0603",
"G0604",
"G0605",
"G0606",
"G0607",
"G0608",
"G0609",
"G0610",
"G0611",
"G0612",
"G0613",
"G0614",
"G0615",
"G0616",
"G0617",
"G0618",
"G0619",
"G0620",
"G0621",
"G0622",
"G0623",
"G0624",
"G0625",
"G0626",
"G0628",
"G0629",
"G0630",
"G0631",
"G0632",
"G0633",
"G0634",
"G0635",
"G0636",
"G0637",
"G0638",
"G0639",
"G0640",
"G0641",
"G0643",
"G0644",
"G0645",
"G0646",
"G0647",
"G0648",
"G0649",
"G0650",
"G0651",
"G0652",
"G0653",
"G0654",
"G0655",
"G0656",
"G0657",
"G0658",
"G0659",
"G0660",
"G0661",
"G0662",
"G0663",
"G0664",
"G0665",
"G0666",
"G0667",
"G0668",
"G0669",
"G0670",
"G0671",
"G0672",
"G0673",
"G0674",
"G0675",
"G0676",
"G0677",
"G0678",
"G0679",
"G0680",
"G0681",
"G0682",
"G0683",
"G0684",
"G0685",
"G0686",
"G0687",
"G0688",
"G0689",
"G0690",
"G0691",
"G0692",
"G0693",
"G0694",
"G0695",
"G0697",
"G0698",
"G0699",
"G0700",
"G0701",
"G0702",
"G0703",
"G0704",
"G0705",
"G0706",
"G0707",
"G0708",
"G0709",
"G0710",
"G0711",
"G0712",
"G0713",
"G0714",
"G0715",
"G0716",
"G0717",
"G0718",
"G0719",
"G0720",
"G0721",
"G0722",
"G0723",
"G0724",
"G0725",
"G0726",
"G0727",
"G0728",
"G0729",
"G0730",
"G0731",
"G0732",
"G0734",
"G0735",
"G0736",
"G0737",
"G0738",
"G0739",
"G0740",
"G0741",
"G0742",
"G0743",
"G0744",
"G0745",
"G0746",
"G0747",
"G0748",
"G0749",
"G0750",
"G0752",
"G0753",
"G0754",
"G0755",
"G0756",
"G0757",
"G0758",
"G0759",
"G0760",
"G0761",
"G0762",
"G0763",
"G0764",
"G0765",
"G0766",
"G0767",
"G0768",
"G0770",
"G0771",
"G0772",
"G0773",
"G0774",
"G0775",
"G0776",
"G0777",
"G0778",
"G0779",
"G0780",
"G0781",
"G0782",
"G0783",
"G0784",
"G0785",
"G0786",
"G0787",
"G0788",
"G0789",
"G0790",
"G0791",
"G0792",
"G0793",
"G0794",
"G0795",
"G0796",
"G0797",
"G0798",
"G0799",
"G0800",
"G0801",
"G0802",
"G0803",
"G0804",
"G0805",
"G0806",
"G0808",
"G0809",
"G0810",
"G0811",
"G0812",
"G0814",
"G0815",
"G0816",
"G0817",
"G0818",
"G0819",
"G0820",
"G0821",
"G0822",
"G0823",
"G0824",
"G0825",
"G0826",
"G0827",
"G0828",
"G0829",
"G0830",
"G0831",
"G0832",
"G0833",
"G0834",
"G0835",
"G0836",
"G0837",
"G0838",
"G0839",
"G0840",
"G0841",
"G0842",
"G0843",
"G0844",
"G0845",
"G0846",
"G0847",
"G0848",
"G0849",
"G0850",
"G0851",
"G0852",
"G0853",
"G0854",
"G0855",
"G0856",
"G0857",
"G0858",
"G0859",
"G0860",
"G0861",
"G0862",
"G0863",
"G0864",
"G0865",
"G0866",
"G0867",
"G0868",
"G0869",
"G0870",
"G0871",
"G0872",
"G0873",
"G0874",
"G0875",
"G0876",
"G0877",
"G0878",
"G0879",
"G0880",
"G0881",
"G0882",
"G0883",
"G0885",
"G0887",
"G0888",
"G0889",
"G0890",
"G0891",
"G0892",
"G0893",
"G0894",
"G0895",
"G0896",
"G0897",
"G0898",
"G0899",
"G0900",
"G0902",
"G0903",
"G0907",
"G0908",
"G0909",
"G0910",
"G0911",
"G0912",
"G0913",
"G0914",
"G0915",
"G0916",
"G0917",
"G0918",
"G0919",
"G0920",
"G0921",
"G0922",
"G0923",
"G0924",
"G0925",
"G0926",
"G0927",
"G0928",
"G0929",
"G0930",
"G0931",
"G0932",
"G0933",
"G0934",
"G0935",
"G0936",
"G0937",
"G0939",
"G0940",
"G0941",
"G0942",
"G0943",
"G0944",
"G0946",
"G0947",
"G0948",
"G0950",
"G0951",
"G0952",
"G0954",
"G0955",
"G0956",
"G0957",
"G0958",
"G0959",
"G0960",
"G0962",
"G0963",
"G0964",
"G0965",
"G0966",
"G0967",
"G0969",
"G0970",
"G0971",
"G0972",
"G0973",
"G0974",
"G0976",
"G0977",
"G0978",
"G0979",
"G0980",
"G0981",
"G0982",
"G0983",
"G0984",
"G0986",
"G0987",
"G0988",
"G0989",
"G0990",
"G0991",
"G0992",
"G0993",
"G0994",
"G0995",
"G0996",
"G0997",
"G0998",
"G0999",
"G1000",
"G1002",
"G1004",
"G1005",
"G1006",
"G1007",
"G1008",
"G1009",
"G1010",
"G1011",
"G1012",
"G1013",
"G1015",
"G1016",
"G1017",
"G1020",
"G1021",
"G1023",
"G1024",
"G1025",
"G1026",
"G1027",
"G1028",
"G1029",
"G1030",
"G1031",
"G1033",
"G1034",
"G1035",
"G1036",
"G1037",
"G1038",
"G1039",
"G1040",
"G1041",
"G1042",
"G1044",
"G1046",
"G1047",
"G1048",
"G1049",
"G1050",
"G1051",
"G1052",
"G1053",
"G1054",
"G1055",
"G1056",
"G1057",
"G1058",
"G1059",
"G1060",
"G1061",
"G1062",
"G1063",
"G1064",
"G1065",
"G1066",
"G1068",
"G1069",
"G1070",
"G1071",
"G1072",
"G1073",
"G1074",
"G1075",
"G1076",
"G1077",
"G1078",
"G1079",
"R0501",
"R0502",
"R0503",
"R0504",
"R0505",
"R0506",
"R0507",
"R0508",
"R0509",
"R0510",
"R0511",
"R0513",
"R0514",
"R0515",
"R0516",
"R0517",
"R0518",
"R0519",
"R0520",
"R0521",
"R0523",
"R0524",
"R0525",
"R0526",
"R0527",
"R0528",
"R0529",
"R0530",
"R0531",
"R0532",
"R0533",
"R0534",
"R0535",
"R0536",
"R0537",
"R0538",
"R0539",
"R0541",
"R0542",
"R0544",
"R0545",
"R0546",
"R0548",
"R0549",
"R0550",
"R0551",
"R0552",
"R0553",
"R0554",
"R0555",
"R0556",
"R0557",
"R0558",
"R0559",
"R0560",
"R0561",
"R0562",
"R0563",
"R0564",
"R0565",
"R0566",
"R0567",
"R0568",
"R0569",
"R0570",
"R0571",
"R0572",
"R0573",
"R0574",
"R0575",
"R0576",
"R0577",
"R0578",
"R0579",
"R0580",
"R0581",
"R0582",
"R0583",
"R0584",
"R0585",
"R0586",
"R0587",
"R0588",
"R0589",
"R0590",
"R0591",
"R0592",
"R0593",
"R0594",
"R0595",
"R0596",
"R0597",
"R0598",
"R0599",
"R0600",
"R0601",
"R0602",
"R0603",
"R0604",
"R0605",
"R0606",
"R0607",
"R0608",
"R0609",
"R0610",
"R0611",
"R0612",
"R0613",
"R0614",
"R0615",
"R0616",
"R0617",
"R0618",
"R0620",
"R0621",
"R0623",
"R0624",
"R0625",
"R0626",
"R0627",
"R0628",
"R0629",
"R0630",
"R0631",
"R0632",
"R0633",
"R0634",
"R0635",
"R0636",
"R0637",
"R0638",
"R0639",
"R0640",
"R0641",
"R0642",
"R0643",
"R0644",
"R0645",
"R0646",
"R0647",
"R0648",
"R0649",
"R0650",
"R0651",
"R0652",
"R0653",
"R0654",
"R0655",
"R0656",
"R0657",
"R0658",
"R0659",
"R0660",
"R0661",
"R0662",
"R0663",
"R0664",
"R0665",
"R0666",
"R0667",
"R0668",
"R0669",
"R0670",
"R0671",
"R0672",
"R0673",
"R0674",
"R0675",
"R0676",
"R0677",
"R0678",
"R0679",
"R0680",
"R0681",
"R0682",
"R0683",
"R0684",
"R0685",
"R0686",
"R0687",
"R0688",
"R0689",
"R0690",
"R0691",
"R0692",
"R0693",
"R0694",
"R0695",
"R0696",
"R0697",
"R0698",
"R0700",
"R0701",
"R0702",
"R0703",
"R0704",
"R0705",
"R0706",
"R0707",
"R0709",
"R0710",
"R0711",
"R0712",
"R0713",
"R0714",
"R0715",
"R0716",
"R0717",
"R0718",
"R0719",
"R0720",
"R0721",
"R0722",
"R0723",
"R0724",
"R0725",
"R0726",
"R0727",
"R0728",
"R0729",
"R0730",
"R0731",
"R0732",
"R0734",
"R0735",
"R0737",
"R0738",
"R0739",
"R0740",
"R0741",
"R0742",
"R0743",
"R0744",
"R0745",
"R0746",
"R0747",
"R0748",
"R0749",
"R0750",
"R0751",
"R0752",
"R0754",
"R0755",
"R0756",
"R0757",
"R0758",
"R0759",
"R0760",
"R0761",
"R0762",
"R0763",
"R0764",
"R0765",
"R0766",
"R0767",
"R0768",
"R0769",
"R0770",
"R0771",
"R0772",
"R0773",
"R0774",
"R0775",
"R0776",
"R0777",
"R0778",
"R0779",
"R0780",
"R0781",
"R0782",
"R0783",
"R0784",
"R0785",
"R0786",
"R0787",
"R0788",
"R0789",
"R0790"];

const patients2 = ["G1221",
"G1223",
"G1224",
"G1225",
"G1226",
"G1227",
"G1228",
"G1229",
"G1230",
"G1231",
"G1232",
"G1233",
"G1234",
"G1235",
"G1236",
"G1237",
"G1238",
"G1239",
"G1240",
"G1241",
"G1242",
"G1243",
"G1244",
"G1246",
"G1247",
"G1249",
"G1250",
"G1251",
"G1253",
"G1254",
"G1255",
"G1256",
"G1257",
"G1258",
"G1259",
"G1260",
"G1261",
"G1262",
"G1263",
"G1264",
"G1265",
"G1266",
"G1267",
"G1268",
"G1269",
"G1270",
"G1271",
"G1272",
"G1273",
"G1274",
"G1275",
"G1276",
"G1277",
"G1278",
"G1279",
"G1280",
"G1281",
"G1282",
"G1283",
"G1284",
"G1286",
"G1287",
"G1288",
"G1289",
"G1290",
"G1291",
"G1292",
"G1293",
"G1294",
"G1295",
"G1296",
"G1298",
"G1299",
"G1300",
"G1301",
"G1303",
"G1304",
"G1306",
"G1307",
"G1308",
"G1309",
"G1310",
"G1311",
"G1313",
"G1314",
"G1315",
"G1316",
"G1317",
"G1318",
"G1319",
"G1320",
"G1321",
"G1322",
"G1323",
"G1324",
"G1325",
"G1326",
"G1327",
"G1328",
"G1329",
"G1330",
"G1331",
"G1332",
"G1333",
"G1334",
"G1335",
"G1336",
"G1337",
"G1338",
"G1339",
"G1340",
"G1341",
"G1342",
"G1343",
"G1344",
"G1345",
"G1346",
"G1347",
"G1348",
"G1349",
"G1350",
"G1351",
"G1352",
"G1353",
"G1354",
"G1355",
"G1356",
"G1357",
"R0869",
"R0870",
"R0871",
"R0872",
"R0873",
"R0874",
"R0875",
"R0876",
"R0877",
"R0878",
"R0879",
"R0880",
"R0881",
"R0883",
"R0884",
"R0885",
"R0886",
"R0887",
"R0888",
"R0890",
"R0891",
"R0892",
"R0893",
"R0894",
"R0895",
"R0896",
"R0897",
"R0898",
"R0900",
"R0901",
"R0902",
"R0903",
"R0904",
"R0905",
"R0906",
"R0907",
"R0908",
"R0909",
"R0910",
"R0911",
"R0912",
"R0913",
"R0914",
"R0915",
"R0916",
"R0917",
"R0918",
"R0919",
"R0920",
"R0921",
"R0922",
"R0923",
"R0924",
"R0925",
"R0926",
"R0927",
"R0928",
"R0929"];

const patients3 = ["G1638",
"G2168",
"G2169",
"G2170",
"G2171",
"G2172",
"G2173",
"G2174",
"G2175",
"G2176",
"G2177",
"G2178",
"G2179",
"G2180",
"G2181",
"G2182",
"G2184",
"G2185",
"G2186",
"G2187",
"G2188",
"G2189",
"G2190",
"G2192",
"G2193",
"G2194",
"G2195",
"G2196",
"G2197",
"G2199",
"G2200",
"G2201",
"G2202",
"G2203",
"G2205",
"G2206",
"G2207",
"G2208",
"G2209",
"G2211",
"G2212",
"G2214",
"G2215",
"G2217",
"G2218",
"G2219",
"G2220",
"G2221",
"G2222",
"G2223",
"G2225",
"G2226",
"G2228",
"G2230",
"G2231",
"G2232",
"G2233",
"G2234",
"G2235",
"G2236",
"G2240",
"G2241",
"G2242",
"G2243",
"G2244",
"G2245",
"G2246",
"G2248",
"G2249",
"G2250",
"G2251",
"G2252",
"G2253",
"G2254",
"G2255",
"G2256",
"G2257",
"G2258",
"G2259",
"G2260",
"G2261",
"G2262",
"G2263",
"G2264",
"G2265",
"G2266",
"G2267",
"G2268",
"G2269",
"G2271",
"G2272",
"G2273",
"G2274",
"G2275",
"G2276",
"G2277",
"G2278",
"G2279",
"G2280",
"G2281",
"G2282",
"G2283",
"G2284",
"G2285",
"G2286",
"G2288",
"G2289",
"G2290",
"G2291",
"G2294",
"G2295",
"G2296",
"G2297",
"G2298",
"G2299",
"G2300",
"G2301",
"G2302",
"G2303",
"G2304",
"G2305",
"G2307",
"G2308",
"G2309",
"G2310",
"G2311",
"G2313",
"G2314",
"G2315",
"G2316",
"G2317",
"G2318",
"G2319",
"G2320",
"G2322",
"G2324",
"G2325",
"G2326",
"G2327",
"G2328",
"G2329",
"G2330",
"G2331",
"G2332",
"G2333",
"G2334",
"G2341",
"G2342",
"G2343",
"G2344",
"G2345",
"G2346",
"G2347",
"G2348",
"G2349",
"G2350",
"G2351",
"G2352",
"G2353",
"G2354",
"G2355",
"G2356",
"G2357",
"G2358",
"G2359",
"G2360",
"G2361",
"G2362",
"G2363",
"G2364",
"G2365",
"G2366",
"G2367",
"G2368",
"G2369",
"G2371",
"G2372",
"G2373",
"G2374",
"G2375",
"G2376",
"G2377",
"G2378",
"G2379",
"G2380",
"G2381",
"G2382",
"G2383",
"G2384",
"G2385",
"G2386",
"G2387",
"G2388",
"G2389",
"G2390",
"G2391",
"G2392",
"G2393",
"G2394",
"G2395",
"G2396",
"G2397",
"G2399",
"G2400",
"G2401",
"G2402",
"G2403",
"G2404",
"G2405",
"G2406",
"G2407",
"G2408",
"G2410",
"G2411",
"G2412",
"G2413",
"G2414",
"G2415",
"G2417",
"G2418",
"G2419",
"G2420",
"G2421",
"G2422",
"G2423",
"G2424",
"G2425",
"G2426",
"G2427",
"G2428",
"G2429",
"G2432",
"G2433",
"G2434",
"G2435",
"G2437",
"G2438",
"G2439",
"G2440",
"G2441",
"G2442",
"G2443",
"G2444",
"G2445",
"G2446",
"G2447",
"G2448",
"G2449",
"G2450",
"G2451",
"G2452",
"G2453",
"G2454",
"G2455",
"G2456",
"G2457",
"G2458",
"G2459",
"G2460",
"G2461",
"G2462",
"G2463",
"G2464",
"G2465",
"G2466",
"G2467",
"G2468",
"G2469",
"G2470",
"G2471",
"G2472",
"G2473",
"G2474",
"G2475",
"G2476",
"G2477",
"G2478",
"G2479",
"G2480",
"G2481",
"G2482",
"G2483",
"G2484",
"G2485",
"G2486",
"G2487",
"G2488",
"G2489",
"G2490",
"G2491",
"G2492",
"G2493",
"G2494",
"G2495",
"G2496",
"G2497",
"G2498",
"G2499",
"G2500",
"G2501",
"G2502",
"G2503",
"G2505",
"G2506",
"G2507",
"G2508",
"G2509",
"G2510",
"G2511",
"G2512",
"G2513",
"G2514",
"G2515",
"G2516",
"G2517",
"G2518",
"G2520",
"G2521",
"G2522",
"G2523",
"G2524",
"G2525",
"G2527",
"G2529",
"G2530",
"G2531",
"G2532",
"G2533",
"G2534",
"G2535",
"G2536",
"G2537",
"G2538",
"G2539",
"G2540",
"G2541",
"G2542",
"G2543",
"G2544",
"G2545",
"G2546",
"G2547",
"G2548",
"G2549",
"G2550",
"G2551",
"G2552",
"G2553",
"G2554",
"G2555",
"G2556",
"G2557",
"G2558",
"G2559",
"G2560",
"G2561",
"G2562",
"G2563",
"G2564",
"G2565",
"G2567",
"G2568",
"G2569",
"G2570",
"G2571",
"G2573",
"G2574",
"G2575",
"G2577",
"G2578",
"G2579",
"G2580",
"G2581",
"G2582",
"G2584",
"G2585",
"G2586",
"G2587",
"G2588",
"G2589",
"G2590",
"G2591",
"G2592",
"G2593",
"G2594",
"G4003",
"G4004",
"G4005",
"G4006",
"G4007",
"G4008",
"G4009",
"G4010",
"G4011",
"G4012",
"G4013",
"G4014",
"G4015",
"G4016",
"G4017",
"G4018",
"G4019",
"G4020",
"G4021",
"G4022",
"G4023",
"G4024",
"G4025",
"G4026",
"G4027",
"G4028",
"G4029",
"G4030",
"G4033",
"G4034",
"G4035",
"G4036",
"G4037",
"G4038",
"G4039",
"G4040",
"G4041",
"G4042",
"G4043",
"G4044",
"G4045",
"G4046",
"G4047",
"G4048",
"G4049",
"G4050",
"G4051",
"G4052",
"G4054",
"G4055",
"G4057",
"G4058",
"G4059",
"G4060",
"G4061",
"G4063",
"G4067",
"G4068",
"G4069",
"G4070",
"G4071",
"G4072",
"G4073",
"G4075",
"G4076",
"G4078",
"G4079",
"G4080",
"G4082",
"G4083",
"G4084",
"G4085",
"G4086",
"G4087",
"G4088",
"G4089",
"G4090",
"G4091",
"G4092",
"G4094",
"G4095",
"G4096",
"G4097",
"G4098",
"G4099",
"G4100",
"G4101",
"G4102",
"G4103",
"G4104",
"G4105",
"G4106",
"G4107",
"G4108",
"G4109",
"G4110",
"G4111",
"G4112",
"G4113",
"G4114",
"G4115",
"G4116",
"G4117",
"G4118",
"G4119",
"G4120",
"G4121",
"G4122",
"G4123",
"G4124",
"G4125",
"G4126",
"G4127",
"G4128",
"G4129",
"G4130",
"G4131",
"G4132",
"G4133",
"G4134",
"G4135",
"G4136",
"G4137",
"G4138",
"G4139",
"G4140",
"G4141",
"G4142",
"G4143",
"G4144",
"G4145",
"G4146",
"G4147",
"G4148",
"G4150",
"G4151",
"G4152",
"G4153",
"G4154",
"G4155",
"G4156",
"G4157",
"G4158",
"G4159",
"G4160",
"G4161",
"G4162",
"G4163",
"G4164",
"G4165",
"G4166",
"G4167",
"G4168",
"G4169",
"G4170",
"G4171",
"G4172",
"G4173",
"G4174",
"G4175",
"G4176",
"G4177",
"G4178",
"G4179",
"G4180",
"G4181",
"G4182",
"G4183",
"G4184",
"G4185",
"G4186",
"G4187",
"G4188",
"G4189",
"G4190",
"G4191",
"G4192",
"G4193",
"G4194",
"G4195",
"G4196",
"G4197",
"G4198",
"G4200",
"G4201",
"G4202",
"G4203",
"G4204",
"G4205",
"G4206",
"G4207",
"G4208",
"G4209",
"G4210",
"G4211",
"G4212",
"G4214",
"G4215",
"G4216",
"G4217",
"G4219",
"G4220",
"G4221",
"G4222",
"G4224",
"G4226",
"G4227",
"G4228",
"G4229",
"G4230",
"G4231",
"G4232",
"G4233",
"G4234",
"G4235",
"R1425",
"R1429",
"R1430",
"R1439",
"R1440",
"R1441",
"R1442",
"R1443",
"R1444",
"R1445",
"R1446",
"R1447",
"R1448",
"R1449",
"R1450",
"R1452",
"R1455",
"R1457",
"R1458",
"R1459",
"R1460",
"R1461",
"R1462",
"R1463",
"R1464",
"R1466",
"R1467",
"R1468",
"R1469",
"R1470",
"R1471",
"R1473",
"R1475",
"R1476",
"R1477",
"R1478",
"R1479",
"R1480",
"R1481",
"R1482",
"R1483",
"R1484",
"R1485",
"R1487",
"R1488",
"R1489",
"R1490",
"R1491",
"R1492",
"R1493",
"R1494",
"R1495",
"R1496",
"R1497",
"R1498",
"R1499",
"R1500",
"R1501",
"R1502",
"R1503",
"R1504",
"R1505",
"R1506",
"R1507",
"R1508",
"R1509",
"R1510",
"R1511",
"R1512",
"R1513",
"R1515",
"R1516",
"R1517",
"R1518",
"R1520",
"R1521",
"R1524",
"R1525",
"R1526",
"R1527",
"R1528",
"R1530",
"R1531",
"R1532",
"R1536",
"R1537",
"R1538",
"R1539",
"R1540",
"R1541",
"R1542",
"R1544",
"R1545",
"R1546",
"R1547",
"R1548",
"R1549",
"R1550",
"R1551",
"R1552",
"R1553",
"R1554",
"R1555",
"R1556",
"R1558",
"R1559",
"R1560",
"R1561",
"R1562",
"R1563",
"R1564",
"R1565",
"R1566",
"R1567",
"R1568",
"R1569",
"R1571",
"R1572",
"R1573",
"R1575",
"R1576",
"R1577",
"R1578",
"R1579",
"R1580",
"R1581",
"R1582",
"R1583",
"R1584",
"R1585",
"R1587",
"R1588",
"R1589",
"R1590",
"R1591",
"R1592",
"R1593",
"R1594",
"R1595",
"R1596",
"R1597",
"R1598",
"R1599",
"R1600",
"R1601",
"R1602",
"R1603",
"R1604",
"R1606",
"R1607",
"R1608",
"R1609",
"R1610",
"R1611",
"R1612",
"R1613",
"R1614",
"R1615",
"R1616",
"R1617",
"R1618",
"R1619",
"R1620",
"R1621",
"R1622",
"R1623",
"R1624",
"R1625",
"R1626",
"R1627",
"R1628",
"R1629",
"R1630",
"R1631",
"R1632",
"R1633",
"R1634",
"R1635",
"R1636",
"R1637",
"R1639",
"R1640",
"R1641",
"R1642",
"R1643",
"R1644",
"R1646",
"R1647",
"R1648",
"R1649",
"R1650",
"R1651",
"R1652",
"R1653",
"R1654",
"R1655",
"R1656",
"R1657",
"R1658",
"R1659",
"R1660",
"R1661",
"R1662",
"R1663",
"R1665",
"R1666",
"R1667",
"R1668",
"R1669",
"R1670",
"R1671",
"R1672",
"R1673",
"R1674",
"R1675",
"R1676",
"R1678",
"R1679",
"R1680",
"R1681",
"R1682",
"R1683",
"R1684",
"R1685",
"R1686",
"R1687",
"R1688",
"R1693",
"R1694",
"R1695",
"R1696",
"R1697",
"R1698",
"R1699",
"R1700",
"R1701",
"R1703",
"R1704",
"R1705",
"R1706",
"R1707",
"R1708",
"R1709",
"R1710",
"R1711",
"R1712",
"R1713",
"R1714",
"R1715",
"R1716",
"R1717",
"R1718",
"R1719",
"R1720",
"R1721",
"R1722",
"R1723",
"R1724",
"R1725",
"R1726",
"R1727",
"R1728",
"R1729",
"R1730",
"R1731",
"R1732",
"R1733",
"R1734",
"R1735",
"R2409",
"R4001",
"R4002",
"R4005",
"R4006",
"R4007",
"R4008",
"R4009",
"R4010",
"R4011",
"R4012",
"R4013",
"R4014",
"R4015",
"R4016",
"R4017",
"R4018",
"R4019",
"R4020",
"R4021",
"R4022",
"R4023",
"R4024",
"R4025",
"R4027",
"R4028",
"R4029",
"R4030",
"R4031",
"R4032",
"R4033",
"R4034",
"R4035"]; 

const patients4 = ["C0018",
"C0019",
"C0020",
"C0021",
"C0022",
"C0023",
"C0024",
"C0025",
"C0026",
"C0027",
"C0028",
"C0029",
"C0030",
"C0031",
"C0032",
"C0033",
"C0034",
"C0035",
"C0036",
"C0037",
"C0038",
"C0039",
"C0041",
"C0043",
"C0044",
"C0045",
"C0046",
"C0047",
"C0048",
"C0049",
"C0050",
"C0051",
"C0052",
"C0053",
"C0054",
"C0055",
"C0056",
"C0058",
"C0059",
"C0060",
"C0061",
"C0062",
"C0063",
"C0064",
"C0066",
"C0067",
"C0068",
"C0069",
"C0070",
"C0072",
"C0073",
"C0074",
"C0075",
"C0076",
"C0078",
"C0079",
"C0080",
"C0081",
"C0082",
"C0083",
"C0084",
"C0085",
"C0086",
"C0087",
"C0088",
"C0089",
"C0090",
"C0091",
"C0092",
"C0093",
"C0094",
"C0095",
"C0096",
"C0097",
"C0098",
"C0099",
"C0100",
"C0101",
"C0102",
"C0103",
"C0104",
"C0105",
"C0106",
"C0107",
"C0108",
"C0109",
"C0110",
"C0111",
"C0112",
"C0113",
"C0114",
"C0115",
"C0116",
"C0117",
"C0118",
"C0119",
"C0120",
"C0121",
"C0122",
"C0123",
"C0124",
"C0125",
"C0126",
"C0129",
"C0130",
"C0131",
"C0133",
"C0134",
"C0135",
"C0136",
"C0137",
"C0138",
"C0139",
"C0140",
"C0143",
"C0144",
"C0145",
"C0146",
"C0147",
"C0148",
"C0149",
"C0150",
"C0151",
"C0153",
"C0154",
"C0155",
"C0156",
"C0157",
"C0158",
"C0159",
"C0160",
"C0161",
"C0162",
"C0163",
"C0164",
"C0165",
"C0166",
"C0167",
"C0168",
"C0169",
"C0170",
"C0171",
"C0172",
"C0173",
"C0174",
"C0175",
"C0176",
"C0177",
"C0178",
"C0179",
"C0180",
"C0182",
"C0183",
"C0184",
"C0185",
"C0186",
"C0187",
"C0188",
"C0189",
"C0190",
"C0191",
"C0192",
"C0193",
"C0194",
"C0195",
"C0196",
"C0197",
"C0198",
"C0199",
"C0200",
"C0201",
"C0202",
"C0203",
"C0204",
"C0205",
"C0206",
"C0207",
"C0208",
"C0209",
"C0210",
"C0211",
"C0212",
"C0213",
"C0214",
"C0215",
"C0216",
"C0217",
"C0218",
"C0219",
"C0220",
"C0221",
"C0222",
"C0224",
"C0225",
"C0226",
"C0227",
"C0228",
"C0229",
"C0230",
"C0231",
"C0232",
"C0233",
"C0234",
"C0236",
"C0237",
"C0238",
"C0239",
"C0240",
"C0241",
"C0242",
"C0243",
"C0244",
"C0245",
"C0246",
"C0247",
"C0248",
"C0249",
"C0250",
"C0251",
"C0252",
"C0253",
"C0254",
"C0255",
"C0256",
"C0257",
"C0258",
"C0259",
"C0260",
"C0261",
"C0262",
"C0263",
"C0264",
"C0265",
"C0266",
"C0267",
"C0268",
"C0270",
"C0271",
"C0272",
"C0275",
"C0276",
"C0277",
"C0278",
"C0279",
"C0280",
"C0281",
"C0282",
"C0283",
"C0284",
"C0285",
"C0286",
"C0287",
"C0288",
"C0289",
"C0290",
"C0291",
"C0292",
"C0293",
"C0294",
"C0295",
"C0296",
"C0297",
"C0299",
"C0300",
"C0301",
"C0302",
"C0303",
"C0304",
"C0305",
"C0306",
"C0307",
"C0309",
"C0311",
"C0312",
"C0313",
"C0314",
"C0315",
"C0316",
"C0317",
"C0318",
"C0319",
"C0320",
"C0321",
"C0322",
"C0323",
"C0324",
"C0325",
"C0326",
"C0327",
"C0328",
"C0329",
"C0330",
"C0331",
"C0332",
"C0334",
"C0335",
"C0338",
"C0339",
"C0340",
"C0341",
"C0342",
"C0343",
"C0344",
"C0345",
"C0347",
"C0349",
"C0350",
"C0351",
"C0352",
"C0353",
"C0354",
"C0355",
"C0356",
"C0357",
"C0358",
"C0359",
"C0360",
"C0361",
"C0363",
"C0364",
"C0365",
"C0366",
"C0367",
"C0368",
"C0369",
"C0370",
"C0371",
"C0372",
"C0373",
"C0374",
"C0376",
"G2939",
"G2940",
"G2941",
"G2942",
"G2943",
"G2944",
"G2945",
"G2947",
"G2948",
"G2949",
"G2950",
"G2951",
"G2952",
"G2953",
"G2954",
"G2955",
"G2956",
"G2957",
"G2958",
"G2960",
"G2961",
"G2964",
"G2965",
"G2968",
"G2969",
"G2970",
"G2971",
"G2972",
"G2974",
"G2975",
"G2976",
"G2977",
"G2979",
"G2980",
"G2981",
"G2982",
"G2983",
"G2984",
"G2985",
"G2986",
"G2987",
"G2988",
"G2989",
"G2990",
"G2991",
"G2992",
"G2993",
"G2994",
"G2996",
"G2997",
"G2998",
"G2999",
"G3000",
"G3001",
"G3002",
"G3003",
"G3004",
"G3005",
"G3006",
"G3007",
"G3008",
"G3009",
"G3010",
"G3012",
"G3013",
"G3014",
"G3015",
"G3016",
"G3018",
"G3019",
"G3020",
"G3021",
"G3023",
"G3024",
"G3025",
"G3026",
"G3027",
"G3028",
"G3029",
"G3030",
"G3031",
"G3032",
"G3033",
"G3034",
"G3035",
"G3036",
"G3037",
"G3038",
"G3039",
"G3040",
"G3041",
"G3042",
"G3043",
"G3044",
"G3045",
"G3046",
"G3047",
"G3048",
"G3050",
"G3051",
"G3052",
"G3053",
"G3054",
"G3055",
"G3056",
"G3057",
"G3058",
"G3059",
"G3060",
"G3061",
"G3062",
"G3063",
"G3064",
"G3065",
"G3066",
"G3067",
"G3068",
"G3069",
"G3070",
"G3071",
"G3072",
"G3073",
"G3075",
"G3076",
"G3077",
"G3078",
"G3079",
"G3080",
"G3081",
"G3082",
"G3083",
"G3084",
"G3085",
"G3086",
"G3087",
"G3088",
"G3089",
"G3090",
"G3091",
"G3092",
"G3093",
"G3094",
"G3095",
"G3096",
"G3097",
"G3099",
"G3100",
"G3101",
"G3102",
"G3104",
"G3105",
"G3106",
"G3107",
"G3108",
"G3109",
"G3110",
"G3111",
"G3112",
"G3113",
"G3114",
"G3115",
"G3116",
"G3118",
"G3119",
"G3120",
"G3121",
"G3122",
"G3123",
"G3124",
"G3125",
"G3126",
"G3127",
"G3128",
"G3129",
"G3130",
"G3131",
"G3132",
"G3133",
"G3134",
"G3135",
"G3136",
"G3137",
"G3138",
"G3139",
"G3140",
"G3141",
"G3142",
"G3143",
"G3144",
"G3145",
"G3146",
"G3148",
"G3149",
"G3150",
"G3151",
"G3152",
"G3153",
"G3154",
"G3155",
"G3156",
"G3157",
"G3158",
"G3159",
"G3160",
"G3161",
"G3162",
"G3163",
"G3164",
"G3165",
"G3166",
"G3167",
"G3168",
"G3169",
"G3170",
"G3171",
"G3172",
"G3173",
"G3174",
"G3175",
"G3176",
"G3177",
"G3178",
"G3179",
"G3180",
"G3181",
"G3182",
"G3183",
"G3184",
"G3185",
"G3186",
"G3187",
"G3188",
"G3189",
"G3190",
"G3191",
"G3192",
"G3193",
"G3194",
"G3195",
"G3196",
"G3197",
"G3198",
"G3199",
"G3200",
"G3201",
"G3202",
"G3203",
"G3204",
"G3205",
"G3206",
"G3207",
"G3209",
"G3210",
"G3211",
"G3212",
"G3213",
"G3214",
"G3215",
"G3216",
"G3217",
"G3218",
"G3219",
"G3220",
"G3221",
"G3222",
"G3223",
"G3224",
"G3225",
"G3226",
"G3227",
"G3228",
"G3229",
"G3230",
"G3231",
"G3232",
"G3233",
"G3234",
"G3235",
"G3236",
"G3237",
"G3238",
"G4414",
"G4415",
"G4416",
"G4417",
"G4418",
"G4419",
"R1970",
"R1971",
"R1972",
"R1973",
"R1974",
"R1975",
"R1976",
"R1977",
"R1978",
"R1979",
"R1980",
"R1981",
"R1982",
"R1983",
"R1984",
"R1985",
"R1986",
"R1987",
"R1988",
"R1989",
"R1990",
"R1991",
"R1992",
"R1993",
"R1994",
"R1995",
"R1996",
"R1997",
"R1998",
"R1999",
"R2000",
"R2001",
"R2002",
"R2003",
"R2004",
"R2005",
"R2006",
"R2007",
"R2008",
"R2009",
"R2010",
"R2011",
"R2012",
"R2013",
"R2014",
"R2015",
"R2016",
"R2017",
"R2018",
"R2019",
"R2020",
"R2021",
"R2022",
"R2023",
"R2024",
"R2025",
"R2026",
"R2027",
"R2028",
"R2029",
"R2030",
"R2031",
"R2032",
"R2033",
"R2034",
"R2035",
"R2036",
"R2037",
"R2038",
"R2039",
"R2040",
"R2041",
"R2042",
"R2043",
"R2044",
"R2045",
"R2046",
"R2047",
"R2048",
"R2049",
"R2050",
"R2051",
"R2052",
"R2053",
"R2054",
"R2055",
"R2056",
"R2057",
"R2058",
"R2059",
"R2060",
"R2061",
"R2062",
"R2063",
"R2064",
"R2065",
"R2066",
"R2067",
"R2068",
"R2069",
"R2070",
"R2071",
"R2072",
"R2073",
"R2074",
"R2075",
"R2076",
"R2077",
"R2078",
"R2079",
"R2080",
"R2081",
"R2082",
"R2083",
"R2084",
"R2085",
"R2086",
"R2087",
"R2088",
"R2089",
"R2090",
"R2091",
"R2092",
"R2093",
"R2094",
"R2096",
"R2097",
"R2098",
"R2099",
"R2100",
"R2101",
"R2102",
"R2103",
"R2104",
"R2105",
"R2106",
"R2107",
"R2108",
"R2109",
"R2110",
"R2111",
"R2112",
"R2113",
"R2114",
"R2115",
"R2116",
"R2117",
"R2118",
"R2119",
"R2120",
"R2121",
"R2122",
"R2123",
"R2124",
"R2126",
"R2127",
"R2128",
"R2129",
"R2130",
"R2131",
"R2132",
"R2133",
"R2134",
"R2135",
"R2136",
"R2137",
"R2138",
"R2139",
"R2140",
"R2141",
"R2142",
"R2143",
"R2144",
"R2145",
"R2146",
"R2147",
"R2148",
"R2149",
"R2150",
"R2151",
"R2153",
"R2154",
"R2155",
"R2156",
"R2157",
"R2158",
"R2159",
"R2160",
"R2161",
"R2162",
"R2163",
"R2164",
"R2165",
"R2166",
"R2167",
"R2168",
"R2169",
"R2170",
"R2171",
"R2172",
"R2173",
"R2174",
"R2175",
"R2176",
"R2177",
"R2178",
"R2179",
"R2180",
"R2181",
"R2182",
"R2183",
"R2184",
"R2185",
"R2186",
"R2187",
"R2188",
"R2189",
"R2190",
"R2191",
"R2192",
"R2193",
"R2194",
"R2195",
"R2196",
"R2197",
"R2198",
"R2199",
"R2200",
"R2201",
"R2202",
"R2203",
"R2204",
"R2205",
"R2206",
"R2207",
"R2208",
"R2209",
"R2211",
"R2212",
"R2213",
"R2214",
"R2215",
"R2216",
"R2217",
"R2218",
"R2219",
"R2220",
"R2221",
"R2222",
"R2223",
"R2224",
"R2225",
"R2227",
"R2228",
"R2230",
"R2231",
"R2232",
"R2233",
"R2234",
"R2235",
"R2236",
"R2237",
"R2238",
"R2239",
"R2240",
"R2241",
"R2242",
"R2243",
"R2244",
"R2245",
"R2246",
"R2247",
"R2249",
"R2250",
"R2251",
"R2252",
"R2253",
"R2254",
"R2255",
"R2256",
"R2257",
"R2258",
"R2259",
"R2260",
"R2261",
"R2262",
"R2263",
"R2264",
"R2265",
"R2266",
"R2267",
"R2268",
"R2269",
"R2270",
"R2271",
"R2272",
"R2274",
"R2275",
"R2276",
"R2277",
"R2278",
"R2279",
"R2280",
"R2281",
"R2282",
"R2283",
"R2284",
"R2285",
"R2286",
"R2287",
"R2288",
"R2289",
"R2290",
"R2291",
"R2292",
"R2293",
"R2294",
"R2295",
"R2296",
"R2297",
"R2298",
"R2299",
"R2300",
"R2301",
"R2302",
"R2303",
"R2304",
"R2305",
"R2306",
"R2307",
"R2308",
"R2309",
"R2310",
"R2311",
"R2312",
"R2313",
"R2314",
"R2315",
"R2316",
"R2317",
"R2318",
"R2319",
"R2320",
"R2321",
"R2322",
"R2323",
"R2324",
"R2325",
"R2326",
"R2327",
"R2328",
"R2329",
"R2330",
"R2331",
"R2332",
"R2333",
"R2334",
"R2335",
"R2336",
"R2337",
"R2338",
"R2339",
"R2340",
"R2341",
"R2342",
"R2343",
"R2344",
"R2345",
"R2346",
"R2347",
"R2348",
"R2349",
"R2350",
"R2351",
"R2352",
"R2353",
"R2354",
"R2355",
"R2356",
"R2357",
"R2358",
"R2359",
"R2360",
"R2361",
"R2362",
"R2363",
"R2364",
"R2365",
"R2366",
"R2367",
"R2368",
"R2369",
"R2371",
"R2372",
"R2373",
"R2374",
"R2375",
"R2376",
"R4211",
"R4212",
"R4213",
"R4214",
"R4215",
"R4216",
"R4217"];

const INITIAL_VIEW_STATE = {
    latitude: 0.090,
    longitude: 0.171,
    zoom: 10.76,
    bearing: 0,
    pitch: 0
};

const COLOR_RANGE = [
    [1, 152, 189],
    [73, 227, 206],
    [216, 254, 181],
    [254, 237, 177],
    [254, 173, 84],
    [209, 55, 78]
];

(function ($) {
    'use strict';
    $(function () {

        if (experiment == null) {
            // Assume Experiment 1
            experiment = "1";
            backgroundImage = "p" + experiment + "-ubi-grid.png";
            updatePatientList(experiment);
        }

        var softSlider = document.getElementById('soft-limit');

        function updatePips(value, type){
            return value + " min";
        }

        noUiSlider.create(softSlider, {
        start: [0],
        tooltips: false,
        behaviour: 'hover-snap',
        connect: true,
        range: {
            min: 0,
            max: 60
        },
        pips: {
            mode: 'values',
            values: range(0, 61, 15),
            density: 15,
            format: {to: updatePips}
        }
        });

        softSlider.noUiSlider.on('start', function (values, handle) {
            console.log("start");
            pausePlayback();
            manualPressed = 1;
        });

        softSlider.noUiSlider.on('change', function (values, handle) {
            manualTime = parseFloat(values[handle]);
            console.log("change: "+ manualTime);
            manualPressed = 0;
            
            startPlayback();
        });

        softSlider.noUiSlider.on('hover', function (values, handle) {
            isHoveringOnSlider = true;
            //console.log("hover: "+ values[handle]);
        });

        $(".js-example-basic-single").select2();
        
        function updatePatientList(expID){
            var patientList;
            if(expID =="1"){
                patientList = patients1;
            } else if (expID =="2"){
                patientList = patients2;
            } else if (expID =="3"){
                patientList = patients3;
            } else if (expID =="4"){
                patientList = patients4;
            }

            $('#patient-menu')
            .find('option')
            .remove()
            .end();

            $('#patient-menu').append($('<option>', { 
                value: null,
                text : "Search patients" 
            }));

            $.each(patientList, function (i, item) {
                $('#patient-menu').append($('<option>', { 
                    value: item,
                    text : item 
                }));
            });
        }

        $('#patient-menu').on('change', function (e) {
            var valueSelected = this.value;
            lookupPatient(valueSelected, function (patData) {
                loadMapData(patData, 1, "Patient " + valueSelected);
                startPlayback();
            });
            $('[id*="condition"]').removeClass("active");
            $('[id*="day"]').removeClass("active");
            $('[id*="-tod"]').removeClass("active");

           
        });


        function lookupPatient(pat_id, callback) {
            const url = baseURL + 'api/data/flows/single/' + parseInt(experiment) + '/' + pat_id;
            console.log(url);
            fetch(url)
                .then(response => response.json())
                .then(data => callback(data))
                .catch(error => callback(error, function(){alert("Server error");}));
        }

        function lookupPatients(callback) {
            const url = baseURL + 'api/data/flows/group/' + parseInt(experiment);
            console.log(url);
            fetch(url, {
     
                // Adding method type
                method: "POST",
                 
                // Adding body or contents to send
                body: JSON.stringify({
                    "group": [
                      "R0502",
                      "R0510",
                      "C0018"
                    ]
                  }),
                 
                // Adding headers to the request
                headers: {
                    "Content-type": "application/json; charset=UTF-8"
                }
            })
                .then(response => response.json())
                .then(data => callback(data))
                .catch(error => callback(error, function(){alert("Server error");}));
        }

        changeExperiment = function changeExperiment(expID) {
            $("#dropdownMenuButtonExperiment").text("Experiment " + parseInt(expID));
            $("#exp"+experiment).removeClass("active");
            experiment = parseInt(expID);
            $("#exp"+experiment).addClass("active");
            backgroundImage = "p" + experiment + "-ubi-grid.png";
            updatePatientList(experiment);
            loadMapData();

            setTimeout(function() {
                isAnimating = true;
                console.log("Delayed");
            }, 200);
        }

        //Taken from https://stackoverflow.com/questions/8273047/
        function range(start, stop, step) {
            if (typeof stop == 'undefined') {
                // one param defined
                stop = start;
                start = 0;
            }
        
            if (typeof step == 'undefined') {
                step = 1;
            }
        
            if ((step > 0 && start >= stop) || (step < 0 && start <= stop)) {
                return [];
            }
        
            var result = [];
            for (var i = start; step > 0 ? i < stop : i > stop; i += step) {
                result.push(i);
            }
        
            return result;
        };

        function loadMapData(data, individual, playbackName) {
            const TripsLayer = deck.TripsLayer;
            const LOOP_LENGTH = data==null? 0 : data.ticks;
            console.log("LOOP_LENGTH "+ LOOP_LENGTH);

            var minutes = parseInt(LOOP_LENGTH / 32);
            var hours = parseInt(Math.floor(minutes / 60));
            console.log("minutes "+ minutes);

            if (data != null) {

                softSlider.noUiSlider.updateOptions({
                    start: [0],
                    tooltips: false,
                    connect: true,
                    range: {
                        min: 0,
                        max: minutes
                    },
                    pips: {
                        mode: 'values',
                        values: range(0, minutes, 15),
                        density: 15,
                        format: {to: updatePips}
                    }
                });

            } else {
               //reset time slider if needed
               softSlider.noUiSlider.updateOptions({
                start: [0],
                tooltips: false,
                connect: true,
                range: {
                    min: 0,
                    max: 60
                },
                pips: {
                    mode: 'values',
                    values: range(0, 61, 15),
                    density: 15,
                    format: {to: updatePips}
                }
                });
                //LOOP_LENGTH = 0;
                //currentTime = 0;
                $("#playback-name").text("Nothing selected");

            }
            

            const VENDOR_COLORS = [
                [255, 0, 0],
                [0, 0, 0], 
            ];
            let currentTime = 0;
            
            const tripProps = {
                id: "trips",
                data: data?.paths,
                getPath: (d) => d.path,
                getTimestamps: (d) => d.timestamps,
                getColor: (d) => individual!=null? VENDOR_COLORS[0] : d.vendor,//d.vendor
                opacity: individual!=null? 3 : 0.09,
                widthMinPixels: individual!=null? 4 : 2.5,
                trailLength: individual!=null? 10000 : 150,
                currentTime,
                shadowEnabled: false,
            };
            

            const bitmapProps = {
                id: 'bitmap-layer',
                bounds: [0.0, 0.0, 0.34441, 0.18209],
                image: './assets/floorplans/' + backgroundImage
            };

            $("#playback-name").text(playbackName);
            animate = () => {
                if (isAnimating || firstLoad) {
                    //console.log("cuurenttime old: " + currentTime);
                    currentTime = (currentTime + 1) % LOOP_LENGTH;
                    if(manualTime != -1)
                    {
                        console.log("currentTime MANUAL: " + currentTime);
                        currentTime = parseInt(manualTime * 32);
                        manualTime = -1;
                    }
                    //console.log("currentTime: " + currentTime);
                    if (LOOP_LENGTH != 0) {
                        var currentMinutes = Math.round(currentTime / 32);
                        /* 
                            This condition is crucial for a smooth control of the slider; 
                            When the slider is being constantly updated during playback time, touch and drag events
                            are paused during the update, thus the user has to click several times to 'accidentally'
                            have one click while it's not being updated.
                            As a results, this condition disables the slider update to help the user in these states:
                                - Slider is being clicked by the user.
                                - The playback minutes count hasn't changed (in other words, no need to update the 
                                    slider every frame).
                                - User is hovering on the slider, this is as an anticipation for an incoming
                                    click (Otherwise the user might need to click several times as mentioned above).
                        */    
                        if(manualPressed != 1 && previousMinutes != currentMinutes && !isHoveringOnSlider){
                            softSlider.noUiSlider.set(parseInt(currentMinutes)); 
                        }

                        //Hovering is considered finised when the minutes count changes, if the user is still hovering,
                        //the noUiSlier will keep updating it accordingly. 
                        if(previousMinutes != currentMinutes){
                            isHoveringOnSlider = false;
                        }
                        $('#time-index').text(convertMinsToHrsMins(currentMinutes));
                        previousMinutes = currentMinutes;
                    }
                    const tripsLayer = new TripsLayer({
                        ...tripProps,
                        currentTime,
                    });
                    const bitmapLayer = new deck.BitmapLayer({
                        ...bitmapProps
                    });
                    mainDeck.setProps({
                        layers: [bitmapLayer, tripsLayer],
                    });
                    
                    window.requestAnimationFrame(animate);
                    //console.log("requestAnimationFrame: isAnimating");
                    firstLoad = false;
                } else {
                    //if(manualPressed == 1)
                    //{
                        //window.requestAnimationFrame(animate);
                        //console.log("requestAnimationFrame: manualPressed");
                    //}

                }
            };

            // taken from https://stackoverflow.com/questions/4687723/
            function convertMinsToHrsMins(minutes) {
                var h = parseInt(Math.floor(minutes / 60));
                var m = parseInt(minutes % 60);
                h = h < 10 ? '0' + h : h; 
                m = m < 10 ? '0' + m : m; 
                return h + ':' + m + ':00' ;
            }

            async function initMap() {
                console.log("initMap()");
                mainDeck = new deck.Deck({
                    container: 'deck-gl-wrapper',
                    initialViewState: INITIAL_VIEW_STATE,
                    layers: [
                        new TripsLayer({
                            tripProps
                        }),
                        new deck.BitmapLayer({
                            bitmapProps
                        })
                    ]
                });
                startPlayback();
                console.log("requestAnimationFrame: initMap");
            }

            window.initMap = initMap;
            console.log(" window.initMap");
            initMap();

            document.getElementById('deck-gl-wrapper').appendChild(mainDeck.canvas);
        }

        function pausePlayback(){
            isAnimating = false;
            $('#play-button').removeClass("mdi-pause");
            $('#play-button').addClass("mdi-play");
        }

        function startPlayback(){
            if(!isAnimating){
                isAnimating = true;
                $('#play-button').removeClass("mdi-play");
                $('#play-button').addClass("mdi-pause");
                window.requestAnimationFrame(animate);
                console.log("requestAnimationFrame: startPlayback");
            }
        }

        $('#playback-button').click(function() {
            if(isAnimating){
                pausePlayback();
            } else {
                startPlayback();
            }
            //loadMapData();
        });

        $('#reset').click(function() {
            location.reload();
        });


        $('[id*="condition"]').click(function () {
            $('[id*="condition"]').removeClass("active");
            console.log(this.id);
            $(this).addClass("active");
            $("#dropdownCondition").text(this.text);
        });

        $('[id*="day"]').click(function () {
            $('[id*="day"]').removeClass("active");
            console.log(this.id);
            $(this).addClass("active");
            $("#dropdownDay").text(this.text);
        });

        $('[id*="-tod"]').click(function () {
            $('[id*="-tod"]').removeClass("active");
            console.log(this.id);
            $(this).addClass("active");
            $("#dropdownTod").text(this.text);
        });

        $('#visualise-results').click(function () {
            var selectedCondition = $('[id*="condition"]').filter(function () {
                return ($(this).hasClass("active"));
            });

            var selectedDay = $('[id*="day"]').filter(function () {
                return ($(this).hasClass("active"));
            });

            var selectedTod = $('[id*="tod"]').filter(function () {
                return ($(this).hasClass("active"));
            });

            requestData(selectedCondition, selectedDay, selectedTod);

        });

        var valueSelected = "G0503";
            lookupPatient(valueSelected, function (patData) {
                loadMapData(patData, 1, "Patient " + valueSelected);
                startPlayback();
            });

        function requestData(selectedCondition, selectedDay, selectedTod){
            if (selectedCondition.length > 0) {
                var apiSelectedCondition;
                switch (selectedCondition[0].id) {
                    case 'gcondition':
                        apiSelectedCondition = 'G';
                        break;
                    case 'rcondition':
                        apiSelectedCondition = 'R';
                        break;
                    case 'ccondition':
                        apiSelectedCondition = 'C';
                        break;
                    case 'scondition':
                        apiSelectedCondition = 'S';
                        break;
                }
                
                const conditionUrl = baseURL + 'api/data/' + parseInt(experiment) + '/condition_type/' + apiSelectedCondition;
                const groupUrl = baseURL + 'api/data/flows/group/' + parseInt(experiment) + '/zerostart/' + 1;
                console.log(conditionUrl);
                console.log(groupUrl);
                fetch(conditionUrl)
                    .then(response => response.json())
                    .then(function (data) {
                        fetch(groupUrl, {
                            method: "POST",
                            body:
                                JSON.stringify({
                                    "group": data.patient_list
                                }),
                            headers: {
                                "Content-type": "application/json; charset=UTF-8"
                            }
                        })
                            .then(response => response.json())
                            .then(function (data) {
                                console.log(data);
                                loadMapData(data, null, apiSelectedCondition +" condition");
                                startPlayback();
                            })
                            .catch(error => callback(error, function () { alert("Server error"); }));
                    })
                    .catch(error => callback(error, function () { alert("Server error"); }));
            } else if (selectedDay.length > 0) {
                const dayUrl = baseURL + 'api/data/' + parseInt(experiment) + '/dow/' + selectedDay[0].id;
                const groupUrl = baseURL + 'api/data/flows/group/' + parseInt(experiment) + '/zerostart/' + 0;
                console.log(dayUrl);
                console.log(groupUrl);
                fetch(dayUrl)
                    .then(response => response.json())
                    .then(function (data) {
                        fetch(groupUrl, {
                            method: "POST",
                            body:
                                JSON.stringify({
                                    "group": data.patient_list
                                }),
                            headers: {
                                "Content-type": "application/json; charset=UTF-8"
                            }
                        })
                            .then(response => response.json())
                            .then(function (data) {
                                console.log(data);
                                loadMapData(data, null, selectedDay[0].id);
                                startPlayback();
                            })
                            .catch(error => callback(error, function () { alert("Server error"); }));
                    })
                    .catch(error => callback(error, function () { alert("Server error"); }));
            } else if (selectedTod.length > 0) {
                var apiSelectedTod;
                switch (selectedTod[0].id) {
                    case 'morning-tod':
                        apiSelectedTod = 'morning';
                        break;
                    case 'afternoon-tod':
                        apiSelectedTod = 'afternoon';
                        break;
                }

                const todUrl = baseURL + 'api/data/' + parseInt(experiment) + '/tod/' + apiSelectedTod;
                const groupUrl = baseURL + 'api/data/flows/group/' + parseInt(experiment) + '/zerostart/' + 0;
                console.log(todUrl);
                console.log(groupUrl);
                fetch(todUrl)
                    .then(response => response.json())
                    .then(function (data) {
                        fetch(groupUrl, {
                            method: "POST",
                            body:
                                JSON.stringify({
                                    "group": data.patient_list
                                }),
                            headers: {
                                "Content-type": "application/json; charset=UTF-8"
                            }
                        })
                            .then(response => response.json())
                            .then(function (data) {
                                console.log(data);
                                loadMapData(data, null, apiSelectedTod);
                                startPlayback();
                            })
                            .catch(error => callback(error, function () { alert("Server error"); }));
                    })
                    .catch(error => callback(error, function () { alert("Server error"); }));
            }
        }

    });
})(jQuery);
